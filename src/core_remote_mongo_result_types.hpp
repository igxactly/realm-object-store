////////////////////////////////////////////////////////////////////////////
//
// Copyright 2020 Realm Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or utilied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////

#ifndef CORE_REMOTE_MONGO_RESULT_TYPES_HPP
#define CORE_REMOTE_MONGO_RESULT_TYPES_HPP

#include <json.hpp>

namespace realm {
namespace mongodb {

// MARK: - Coding keys

const static std::string inserted_id_key = "insertedId";
const static std::string inserted_ids_key = "insertedIds";
const static std::string deleted_count_key = "deletedCount";
const static std::string matched_count_key = "matchedCount";
const static std::string modified_count_key = "modifiedCount";
const static std::string upserted_id_key = "upsertedId";

// TODO: Place using statement here for now until types exists
using BSONValue = std::string;
using Document = nlohmann::json;

// MARK: - Result types

/// Options to use when executing a `find` command on a `RemoteMongoCollection`.
struct RemoteFindOptions {
    /// The maximum number of documents to return.
    util::Optional<long int> limit;

    /// Limits the fields to return for all matching documents.
    util::Optional<Document> projection;

    /// The order in which to return matching documents.
    util::Optional<Document> sort;
};

/// The result of an `insert_one` command on a `RemoteMongoCollection`.
struct RemoteInsertOneResult {
    /// The identifier that was inserted. If the document doesn't have an identifier, this value
    /// will be generated by the Stitch server and added to the document before insertion.
    BSONValue inserted_id;
};

/// The result of an `insert_many` command on a `RemoteMongoCollection`.
struct RemoteInsertManyResult {
    /// Map of the index of the inserted document to the id of the inserted document.
    std::map<long int, BSONValue> inserted_ids;
};

/// The result of a `delete` command on a `RemoteMongoCollection`.
struct RemoteDeleteResult {
    /// The number of documents that were deleted.
    int deleted_count;
};

/// The result of an `update_one` or `update_many` operation a `RemoteMongoCollection`.
struct RemoteUpdateResult {
    /// The number of documents that matched the filter.
    int matched_count;
    /// The number of documents modified.
    int modified_count;
    /// The identifier of the inserted document if an upsert took place.
    BSONValue upserted_id;
};

// Options to use when executing a `find_one_and_update`, `find_one_and_replace`,
// or `find_one_and_delete` command on a `remote_mongo_collection`.
struct RemoteFindOneAndModifyOptions {
    // Limits the fields to return for all matching documents.
    util::Optional<Document> projection;
    // The order in which to return matching documents.
    util::Optional<Document> sort;
    // Whether or not to perform an upsert, default is false
    // (only available for find_one_and_replace and find_one_and_update)
    util::Optional<bool> upsert;
    // If this is true then the new document is returned,
    // Otherwise the old document is returned (default)
    // (only available for find_one_and_replace and find_one_and_update)
    util::Optional<bool> return_new_document;
};

} // namespace mongodb
} // namespace realm

#endif /* CORE_REMOTE_MONGO_RESULT_TYPES_HPP */
